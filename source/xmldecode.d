/*  The code inside this module is copied from kxml
   (https://github.com/opticron/kxml) which is licensed under BSL-1.0:

   Boost Software License - Version 1.0 - August 17th, 2003

   Permission is hereby granted, free of charge, to any person or organization
   obtaining a copy of the software and accompanying documentation covered by
   this license (the "Software") to use, reproduce, display, distribute,
   execute, and transmit the Software, and to prepare derivative works of the
   Software, and to permit third-parties to whom the Software is furnished to
   do so, all subject to the following:
   
   The copyright notices in the Software and this entire statement, including
   the above license grant, this restriction and the following disclaimer,
   must be included in all copies of the Software, in whole or in part, and
   all derivative works of the Software, unless such copies or derivative
   works are solely in the form of machine-executable object code generated by
   a source language processor.
   
   THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
   SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
   FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
   ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
   DEALINGS IN THE SOFTWARE.
*/

module xmldecode;

import std.conv: to;
import std.regex;
import std.string : replace;

public:


string regrep(string input, string pattern, string delegate(string) translator)
{
    string tmpdel(Captures!(string) m)
    {
        return translator(m.hit);
    }

    return std.regex.replace!(tmpdel)(input, regex(pattern, "g"));
}

string xmlDecode(string src)
{
    src = replace(src, "&lt;", "<");
    src = replace(src, "&gt;", ">");
    src = replace(src, "&apos;", "'");
    src = replace(src, "&quot;", "\"");
    // take care of decimal character entities
    src = regrep(src, "&#\\d{1,8};", (string m) {
        auto cnum = m[2 .. $ - 1];
        dchar dnum = cast(dchar) cnum.to!int;
        return quickUTF8(dnum);
    });
    // take care of hex character entities
    src = regrep(src, "&#[xX][0-9a-fA-F]{1,8};", (string m) {
        auto cnum = m[3 .. $ - 1];
        dchar dnum = hex2dchar(cnum);
        return quickUTF8(dnum);
    });
    src = replace(src, "&amp;", "&");
    return src;
}

// a quick dchar to utf8 conversion
string quickUTF8(dchar dachar)
{
    char[] ret;
    foreach (char r; [dachar])
    {
        ret ~= r;
    }
    return cast(string) ret;
}

// convert a hex string to a raw dchar
dchar hex2dchar(string hex)
{
    dchar res = 0;
    foreach (digit; hex)
    {
        res <<= 4;
        res |= toHVal(digit);
    }
    return res;
}

// convert a single hex digit to its raw value
private dchar toHVal(char digit)
{
    if (digit >= '0' && digit <= '9')
    {
        return digit - '0';
    }
    if (digit >= 'a' && digit <= 'f')
    {
        return digit - 'a' + 10;
    }
    if (digit >= 'A' && digit <= 'F')
    {
        return digit - 'A' + 10;
    }
    return 0;
}
